################################
#        START PRINT           
################################
[gcode_macro START_PRINT]
# Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
# gcode parameters for area bed mesh
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0

gcode:
    {% set th = printer.toolhead %}
# Get temps from slicer
    {% set BED_TEMP = params.BED_TEMP|default(51)|float %}
    {% set HOTEND_TEMP = params.HOTEND_TEMP|default(191)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER|default(45)|float %}
    {% set FILAMENT_TYPE = params.FILAMENT|default(PLA)|string %}
# Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
# Use metric values
    G21
# Set XYZ to absolute
    G90
# Preheat bed temp without waiting
    M140 S{BED_TEMP}
# Preheat nozzle temp without waiting
    M104 S140
    STATUS_HEATING
# Homing sequence
    G28
# Check if bed is tilted
    M117 Checking bed tramming...
    SCREWS_TILT_CALCULATE MAX_DEVIATION=0.10
    G1 Z20
# wait for bed to reach temp before proceeding
    M117 Waiting for bed to reach desired temp...
    M190 S{BED_TEMP}
# Align X Gantry to bed
    M117 Tilting gantry.
    Z_TILT_ADJUST
# Adaptive Bed Mesh
    {% if params.AREA_START and params.AREA_END %}
     BED_MESH_CALIBRATE AREA_START={params.AREA_START} AREA_END={params.AREA_END}
    {% else %}
     BED_MESH_PROFILE LOAD=default
    {% endif %}
# Calculate Z offset    
    M117 Heating nozzle to 200
    M109 S200
    M117 Calibrating Z offset...
    CALIBRATE_Z
# Wait for nozzle to reach temperature    
    M117 Waiting for hotend to reach set temp...
    M109 S{HOTEND_TEMP}
# Adjust the G-Code Z offset if needed
    G90
    M117 Moving toolhead to bed origin 0x0.
    G1 X0 Y0 Z20 F5000
    G92 E0         ; Reset extruder distance
    G1 E20 F60    ; purge 20mm
# Purge sequence
    M117 Purge line...
    G1 X1 Y20 Z0 F5000.0           ; Move to start position
    G1 E5 F300                       ; Prime the nozzle
    G1 X1 Y200 F1500.0 E15           ; Draw the first line
    G1 X1.5 Y200 F5000.0             ; Move to side a little 
    G1 X1.5 Y30 F1500.0 E30          ; Draw the second line
    G1 Z4 F3000                      ; Move Z Axis up
    M83                              ; Relative E
    G92 E0                           ; Reset extruder distance
    STATUS_PRINTING
    #SKEW_PROFILE LOAD=calilantern_skew_profile

################################
#        END PRINT
################################
[gcode_macro END_PRINT]
#   Use PRINT_END for the slicer ending script
gcode:
    #SET_SKEW CLEAR=1
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 10, th.axis_maximum.z]|min %}
    M400                                     ; wait for buffer to clear                        
    TURN_OFF_HEATERS
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F10000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 8} F3600  ; park nozzle at rear ; old value th.axis_maximum.y - 2
    G1 E-5.0 F180                            ; retract filament
    G92 E0                                   ; zero the extruder 
    M107                                     ; turn off part cooling fan
    NOZZLE_BRUSH
    G0 Z50
    G4 S3                                    ; wait 3 seconds
    M18 X Y                                  ; disable X and Y motors
    M84 Z E S30                              ; disable Z and E after 30 seconds
    SET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1


################################
#        CALIBRATE Z
################################
[gcode_macro CALIBRATE_Z]
rename_existing: BASE_CALIBRATE_Z
gcode:
    STATUS_CALIBRATING_Z
    M117 Z-Calibration in progress...
    {% set bed_position = params.BED_POSITION|default('None') %}
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
#    G28                              ; can also be a conditional homing macro
    {%if printer.extruder.can_extrude|lower != 'true' %}
      M117 !!!Warning!!! You're calibrating with a cold nozzle!
    {% endif %}
    _CheckProbe action=query
    {% if bed_position != 'None' %}
      M117 Z-Calibration on bed reference index...
      BASE_CALIBRATE_Z BED_POSITION={bed_position}
    {% else %}
      BASE_CALIBRATE_Z
    {% endif %}
    M117 Docking probe...
    DOCK_PROBE                        ; and parking it afterwards (or DOCK_PROBE in klicky macros)
    STATUS_READY


################################
#  Z TILT             
################################
#[gcode_macro _Z_TILT_CHECK]
#gcode:
#  {% if printer["gcode_macro Z_TILT_ADJUST"].adjusted != 1 %}
#    Z_TILT_ADJUST
#  {% else %}
#    {action_respond_info("Z-Tilt already adjusted, skipping.")} 
#  {% endif %}

#[gcode_macro Z_TILT_ADJUST]
#rename_existing: BASE_Z_TILT_ADJUST
#variable_adjusted: 0
#gcode:
#  {% if "xyz" not in printer.toolhead.homed_axes %}
#   G28                           ; home if not already homed
#  {% endif %}
#  _KLACK_STATUS_LEVELING
#  G90
#  G1 Z25 F3000
#  G1 Y117.5
#  ATTACH_PROBE
#  BASE_Z_TILT_ADJUST
#  SET_GCODE_VARIABLE MACRO=Z_TILT_ADJUST VARIABLE=adjusted VALUE=1
#  G1 Z20 F3000                   ; To clear the bed so the probe can be docked
#  _KLACK_STATUS_READY


################################
#  NOZZLE BRUSH              
################################
[gcode_macro NOZZLE_BRUSH]
gcode:
   STATUS_CLEANING
   {% set target = params.HOTEND_TEMP|default(180)|float %}
   {%if target < 180 %}
     M117 Hotend heating!
     M109 S180 
   {% elif target >= 180 %}  
      DOCK_PROBE
      M117 Docking probe to avoid hitting the dock retainer.
      M118 Docking probe to avoid hitting the dock retainer.
      M117 Cleaning brush!
      M118 Cleaning brush!
      G90
      G1 Z20 F3000       # raise z to clear brush
      G1 X219 Y238 F6000 #starting coordinates of brush
      G1 Z1 F3000      # z height of scrub
      G1 X219 F10000
      G1 X194 F10000
      G1 X219 F10000     
      G1 X194 F10000
      G1 X219 F10000
      G1 X194 F10000
      G1 X219 F10000
      G1 X194 F10000
      G1 X219 F10000
      G1 X194 F10000
      G1 X219 F10000
      G1 X194 F10000
      G1 X177 Y235 F10000     
      #G1 E-5  F180      # Retract 5mm @ 3mm/s of filament to reduce oozing.
      G1 Z10 F5000      # Raise Z to clear
    {% endif %}


################################
#  BED ORIGIN
################################
[gcode_macro RAPID_MOVE_Y]
description: Moving the Y carriage back and forth rapidly
gcode:
  {% set th = printer.toolhead %}
  {% if 'xy' not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
      CENTER_NOZZLE
      G1 Y0   F10000
      G1 Y{th.axis_maximum.y - 1} F10000
      G1 Y0   F10000
      G1 Y{th.axis_maximum.y - 1} F10000
      G1 Y0   F10000
      G1 Y{th.axis_maximum.y - 1} F10000
      G1 Y0   F10000
      G1 Y{th.axis_maximum.y - 1} F10000
      G1 Y0   F10000
      G1 Y{th.axis_maximum.y - 1} F10000
      G1 Y0   F10000
      G1 Y{th.axis_maximum.y - 1} F10000
      G1 Y0   F10000
      G1 Y{th.axis_maximum.y - 1} F10000
      G1 Y0   F10000
      G1 Y{th.axis_maximum.y - 1} F10000
      G1 Y0   F10000
      G1 Y{th.axis_maximum.y - 1} F10000
      G1 Y0   F10000
      G1 Y{th.axis_maximum.y - 1} F10000
      G1 Y0   F10000
      G1 Y{th.axis_maximum.y - 1} F10000
      G1 Y0   F10000
      G1 Y{th.axis_maximum.y - 1} F10000
      CENTER_NOZZLE



################################
#  BED ORIGIN
################################
[gcode_macro BED_ORIGIN]
description: Moving the printhead to 0,0
gcode:
  {% if 'xy' not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
  DOCK_PROBE
  M117 Moving to bed origin 0,0
  G90
  G1 X0 Y0 Z4 F3000


################################
#  PREHEAT              
################################
[gcode_macro PREHEAT]
gcode:
    M140 S50
    STATUS_HEATING
    M104 S180

################################
#  CHANGE FILAMENT              
################################
[gcode_macro M600]
gcode:
    PAUSE
    STATUS_BUSY


################################
#  CANCEL PRINT             
################################
[gcode_macro CANCEL_PRINT]
description: Clears any pause and runs PRINT_END macro
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    END_PRINT
    BASE_CANCEL_PRINT
    STATUS_READY


################################
#           PAUSE              
################################
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    M104 S0                                                                                  ; turn off hotend
    {% set z = params.Z|default(25)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=orbiter_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        STATUS_COOLING
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}



################################
#           RESUME             
################################
# WARNING!!!
# This resume macro will move directly back to its previous position.
# If using “complete individual objects” or “one at a time” in your slicer, ensure that the objects are printed from back to front on the build plate to avoid collisions on the return.
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=orbiter_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
            STATUS_HEATING
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        STATUS_PRINTING
        BASE_RESUME                                                                  ; resume print
    {% endif %}

############################################################################
# This is used by KlipperScreen. Commented out because I renamed the `filament_load` macro in OrbiterSensor.cfg to `LOAD_FILAMENT`.
#code_macro LOAD_FILAMENT]
#ode:   M83                            ; set extruder to relative
# G1 E30 F300                    ; load
# G1 E15 F150                    ; prime nozzle with filament
# M82                            ; set extruder to absolute
# G4 S5                          ; wait 5 seconds
#
############################################################################

# This is used by KlipperScreen. Commented out because I renamed the `filament_unload` macro in OrbiterSensor.cfg to `UNLOAD_FILAMENT`.
#code_macro UNLOAD_FILAMENT]
#ode:
# 
# M83                            ; set extruder to relative
# G1 E10 F300                    ; extrude a little to soften tip
# G1 E-40 F1800                  ; retract some, but not too much or it will jam
# M82                            ; set extruder to absolute
# M104 S0                        ; turn off hot end
#
#############################################################################


################################
#           DISABLE MOTORS             
################################
[gcode_macro DISABLE_MOTORS]
gcode:
   M18
   SET_NOZZLE_LEDS_OFF

############################################################################
#[gcode_macro TEST_SPEED] # Commented out until I see a need to test this.
#gcode:
#	# Speed
#	{% set speed  = 350 %}
#	# Iterations
#	{% set iterations = params.ITERATIONS|default(50)|int %}
#	# Acceleration
#	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
#	# Bounding box (in case the machine min/maxes are not perfect)
#	{% set bound = params.BOUND|default(20)|int %}
#	
#	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
#	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
#	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
#	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
#	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
#
#	# Save current gcode state (absolute/relative, etc)
#	SAVE_GCODE_STATE NAME=TEST_SPEED
#	
#	# Absolute positioning
#	G90
#	
#	# Set new limits
#	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
#
#	# Home and get position for comparison later:
#		G28
#		# QGL if not already QGLd (only if QGL section exists in config)
#		{% if printer.configfile.settings.quad_gantry_level %}
#			{% if printer.quad_gantry_level.applied == False %}
#				QUAD_GANTRY_LEVEL
#				G28 Z
#			{% endif %}
#		{% endif %}	
#		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
#		G4 P1000 
#		GET_POSITION
#
#	# Go to starting position
#	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}
#
#	{% for i in range(iterations) %}
#		# Diagonals
#		G0 X{x_min} Y{y_min} F{speed * 60}
#		G0 X{x_max} Y{y_max} F{speed * 60}
#		G0 X{x_min} Y{y_min} F{speed * 60}
#		G0 X{x_max} Y{y_min} F{speed * 60}
#		G0 X{x_min} Y{y_max} F{speed * 60}
#		G0 X{x_max} Y{y_min} F{speed * 60}
#		
#		# Box
#		G0 X{x_min} Y{y_min} F{speed * 60}
#		G0 X{x_min} Y{y_max} F{speed * 60}
#		G0 X{x_max} Y{y_max} F{speed * 60}
#		G0 X{x_max} Y{y_min} F{speed * 60}
#	{% endfor %}
#
#	# Restore max speed/accel/accel_to_decel to their configured values
#	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
#
#	# Re-home XY and get position again for comparison:
#		G28 X Y
#		# Go to XY home positions (in case your homing override leaves it elsewhere)
#		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
#		G4 P1000 
#		GET_POSITION


################################
#        PID EXTRUDER        
################################
[gcode_macro PID_EXTRUDER_215]
gcode:
  STATUS_HEATING
  PID_CALIBRATE HEATER=extruder TARGET=215
  SAVE_CONFIG

[gcode_macro PID_EXTRUDER_250]
gcode:
  STATUS_HEATING
  PID_CALIBRATE HEATER=extruder TARGET=250
  SAVE_CONFIG

[gcode_macro PID_BED_60]
gcode:
  STATUS_HEATING
  PID_CALIBRATE HEATER=heater_bed TARGET=60
  SAVE_CONFIG


################################
#        EXCLUDE OBJECT        
################################
[exclude_object]

[gcode_macro _cancel_object]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}


################################
#        M109        
################################
#Replace M109 (wait for hotend temperature) with TEMPERATURE_WAIT.
#This just makes Klipper resume immediately after reaching temp. Otherwise it waits for the temperature to stabilize.
[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}


################################
#        M190        
################################
#M190 (wait for bed temperature) with TEMPERATURE_WAIT.
#This just makes Klipper resume immediately after reaching temp. Otherwise it waits for the temperature to stabilize.

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

################################
#        PARKING        
################################
# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED
    STATUS_BUSY


################################
#        HEATERS OFF        
################################
[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    SET_NOZZLE_LEDS_OFF
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    SET_LOGO_LEDS_OFF
    M107                                 ; turn print cooling fan off
    


################################
#        CENTER NOZZLE        
################################
[gcode_macro CENTER_NOZZLE]
gcode:
    M117 Centering nozzle to the bed.
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    G90
    G1 X117.5 Y117.5 Z10 F10000
    M117 Nozzle centered...
    STATUS_READY

################################
#        SEARCH VARIABLES        
################################
# This macro will allow you to type SEARCH_VARS S={some word} from the terminal and
# it will respond with all of the matching items in the printer object.

[gcode_macro SEARCH_VARS]
description: Search any matching items in the printer object. Ex: SEARCH_VARS s="profile"
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}
