################################
#        START PRINT           
################################
[gcode_macro START_PRINT]
# Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
# gcode parameters for area bed mesh
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0

gcode:
    {% set th = printer.toolhead %}
# Get temps from slicer
    {% set BED_TEMP = params.BED_TEMP|default(51)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(191)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER|default(45)|float %}
	{% set FILAMENT_TYPE = params.FILAMENT|default(PLA)|string %}
# Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
# Homing sequence
	G28
    #SCREWS_TILT_CALCULATE MAX_DEVIATION=0.06    ; need to enable screw tile in printer.cfg
    G1 Z20                           ; Move nozzle up
    M104 S170                        ; set nozzle temp without waiting
    M190 S{BED_TEMP}                 ; wait for bed to reach temp
#   BED_MESH_CALIBRATE               ; This is the default bed mesh method - disabled because meshing printed area only
#    BED_MESH_PROFILE LOAD=default
    {% if params.AREA_START and params.AREA_END %}
     BED_MESH_CALIBRATE AREA_START={params.AREA_START} AREA_END={params.AREA_END}
    {% else %}
     BED_MESH_CALIBRATE
    {% endif %}
    G0 X0 Y0 F3000                   ; park nozzle at front
    M109 S{EXTRUDER_TEMP}            ; wait for nozzle to reach temperature
    
# Purge_sequence
    G1 Z2 F3000                      ; Move Z Axis up
    G1 X2 Y20 Z0.28 F5000.0          ; Move to start position
    G1 X2 Y200 Z0.28 F1500.0 E15     ; Draw the first line
    G1 X2.3 Y200 Z0.28 F5000.0       ; Move to side a little 
    G1 X2.3 Y20 Z0.28 F1500.0 E30    ; Draw the second line
    G92 E0                           ; Reset Extruder
    G1 Z2 F3000                      ; Move Z Axis up
    G92 E0                           ; zero the extruder
    G90                              ; Set all axes to absolute
    M83                              ; Set E to Relative Positioning
    M117 By your command!

   # SKEW_PROFILE LOAD=my_skew_profile


################################
#        END PRINT
################################
[gcode_macro END_PRINT]
#   Use PRINT_END for the slicer ending script
gcode:
    #SET_SKEW CLEAR=1
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 10, th.axis_maximum.z]|min %}
    M400                                     ; wait for buffer to clear
    G92 E0                                   ; zero the extruder
    G1 E-15.0 F3600                          ; retract filament
    TURN_OFF_HEATERS
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F10000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 8} F3600  ; park nozzle at rear ; old value th.axis_maximum.y - 2
    M107                                     ; turn off fan
    G4 S3                                    ; wait 3 seconds
    M18                                      ; disable motors



################################
#  CHANGE FILAMENT              
################################
#[pause_resume]

[gcode_macro change_filament]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state



################################
#           PAUSE              
################################
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 9.0 %} ; the default is 5% but I want to park it earlier (235mm instead of 245mm) so it won't pick up the probe
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}


################################
#           RESUME             
################################
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

############################################################################
# This is used by KlipperScreen. Commented out because I renamed the `filament_load` macro in OrbiterSensor.cfg to `LOAD_FILAMENT`.
#code_macro LOAD_FILAMENT]
#ode:   M83                            ; set extruder to relative
# G1 E30 F300                    ; load
# G1 E15 F150                    ; prime nozzle with filament
# M82                            ; set extruder to absolute
# G4 S5                          ; wait 5 seconds
#
############################################################################

# This is used by KlipperScreen. Commented out because I renamed the `filament_unload` macro in OrbiterSensor.cfg to `UNLOAD_FILAMENT`.
#code_macro UNLOAD_FILAMENT]
#ode:
# 
# M83                            ; set extruder to relative
# G1 E10 F300                    ; extrude a little to soften tip
# G1 E-40 F1800                  ; retract some, but not too much or it will jam
# M82                            ; set extruder to absolute
# M104 S0                        ; turn off hot end
#
#############################################################################
[gcode_macro DISABLE_MOTORS]
gcode:
   M18

############################################################################
#[gcode_macro TEST_SPEED] # Commented out until I see a need to test this.
#gcode:
#	# Speed
#	{% set speed  = 350 %}
#	# Iterations
#	{% set iterations = params.ITERATIONS|default(50)|int %}
#	# Acceleration
#	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
#	# Bounding box (in case the machine min/maxes are not perfect)
#	{% set bound = params.BOUND|default(20)|int %}
#	
#	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
#	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
#	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
#	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
#	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
#
#	# Save current gcode state (absolute/relative, etc)
#	SAVE_GCODE_STATE NAME=TEST_SPEED
#	
#	# Absolute positioning
#	G90
#	
#	# Set new limits
#	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
#
#	# Home and get position for comparison later:
#		G28
#		# QGL if not already QGLd (only if QGL section exists in config)
#		{% if printer.configfile.settings.quad_gantry_level %}
#			{% if printer.quad_gantry_level.applied == False %}
#				QUAD_GANTRY_LEVEL
#				G28 Z
#			{% endif %}
#		{% endif %}	
#		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
#		G4 P1000 
#		GET_POSITION
#
#	# Go to starting position
#	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}
#
#	{% for i in range(iterations) %}
#		# Diagonals
#		G0 X{x_min} Y{y_min} F{speed * 60}
#		G0 X{x_max} Y{y_max} F{speed * 60}
#		G0 X{x_min} Y{y_min} F{speed * 60}
#		G0 X{x_max} Y{y_min} F{speed * 60}
#		G0 X{x_min} Y{y_max} F{speed * 60}
#		G0 X{x_max} Y{y_min} F{speed * 60}
#		
#		# Box
#		G0 X{x_min} Y{y_min} F{speed * 60}
#		G0 X{x_min} Y{y_max} F{speed * 60}
#		G0 X{x_max} Y{y_max} F{speed * 60}
#		G0 X{x_max} Y{y_min} F{speed * 60}
#	{% endfor %}
#
#	# Restore max speed/accel/accel_to_decel to their configured values
#	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
#
#	# Re-home XY and get position again for comparison:
#		G28 X Y
#		# Go to XY home positions (in case your homing override leaves it elsewhere)
#		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
#		G4 P1000 
#		GET_POSITION


################################
#        PID EXTRUDER        
################################
[gcode_macro PID_EXTRUDER_215]
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=215
  SAVE_CONFIG

[gcode_macro PID_EXTRUDER_250]
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=250
  SAVE_CONFIG

[gcode_macro PID_BED_60]
gcode:
  PID_CALIBRATE HEATER=heater_bed TARGET=60
  SAVE_CONFIG


################################
#        EXCLUDE OBJECT        
################################
[exclude_object]

[gcode_macro _cancel_object]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}